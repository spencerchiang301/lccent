Flask 

1. 基本結構
   *- static (靜態檔案) 
   - uploads (上傳檔案)
   - routings (blueprints)
      一家公司, 它有三家子公司 A, B，Ｃ
        —　Ａ
          - routings / demo_a / urls.py 
             把所有和它相關聯的 routing 都放在它下面
        —　Ｂ
        —　Ｃ
        在 app.py 裡面做註冊 app.register_blueprint(demo_a)

   *- templates (樣板主要放 html, css, js)
   - settings (設定)
   app.py (用來啟動 flask)

2. 路由
   @app.route("/",methods=['GET','POST'])
   def index():
      return "hello world"

   / 路徑 
   methods 可以讓使用者用什麼方法去存取
   函數

   GET 向伺服器傳送資料,並取得資料回傳, 但不安全
       GET http://localhost:5000?user=abc&pass=123

   POST 向傳送伺服器資料,並取得資料回傳

   DELETE 刪除伺服器資料
   
   PUT 更新伺服器資料



3. 樣板 jinja2
   - templates 下建立一個 html 
   - routing 下用 render_template("index.html")


4. linux/ unix -> gunicorn
   windows -> waitress

     pip install waitress

     把 app.py

     if __name__ == '__main__':
          from waitress import serve
          serve(app, host='0.0.0.0', port=8000)

5. session -> 儲存 userid, username 

6. Flask-WTF 去登入登出
   design form 
   auth / forms.py


7. pydantic
   - 資料格式

   帳號: admin, spencer, jack -> String
   密碼: abC@123, #@#$@DAS -> String
   年齡: 22, 33, 25 -> int
   薪水: 134124, 4035.22 -> float


1. 
-------------------------------------------
<!-- basic -->
<!--{% extends "base.html" %}-->

<!--{% block title %} 登入 {% endblock %}-->

<!--{% block content %}-->
<!--  <h2> 登入系統</h2>-->
<!--    {% if error %}-->
<!--    <p style="color:red;">{{error}}</p>-->
<!--    {% endif %}-->
<!--  <form method="post">-->
<!--      <label>帳號:</label><br>-->
<!--      <input type="text" name="username" required><br><br>-->
<!--      <label>密碼:</label><br>-->
<!--      <input type="text" name="password" required><br><br>-->
<!--      <button type="submit">登入</button>-->
<!--  </form>-->
<!--{% endblock %}-->

1.
# 基礎版本, 沒有flask-wtf
# @app.route("/login", methods=['GET','POST'])
# def login():
#     error = None
#     if request.method=='POST':
#         if request.form['username'] == USERNAME and request.form['password'] == PASSWORD:
#             session['logged_in'] = True
#             session['username'] = USERNAME
#             return redirect(url_for('index'))
#         else:
#             error = '帳密錯誤'
#     return render_template('login.html', error= error)


-------
一個新專案
 1. 分析
 2. 拆成很多步驟 
    - username, password
    - login UI
    - login routing
    - authenticate 

    - sql integrated
    - create datbase
    - create table
    - add a user with username and password

    - add mysql connection function
    - testing... 

    

